#!/usr/bin/env python3
"""
Sistema de actualizaci√≥n autom√°tica para Liga MX 2025
Actualiza datos cada 30 minutos desde fuentes mexicanas reales
"""

import schedule
import time
import logging
import sys
import os
from datetime import datetime

# Agregar el directorio ra√≠z al path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('liga_mx_auto_update.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

def update_liga_mx_data():
    """Funci√≥n para actualizar datos de Liga MX desde fuentes reales"""
    try:
        logger.info("üöÄ INICIANDO ACTUALIZACI√ìN AUTOM√ÅTICA LIGA MX 2025")
        
        # Importar el data manager
        from services.liga_mx_data_manager import LigaMXDataManager
        
        # Crear instancia y actualizar
        data_manager = LigaMXDataManager()
        result = data_manager.update_all_data()
        
        if 'error' in result:
            logger.error(f"‚ùå Error en actualizaci√≥n autom√°tica: {result['error']}")
            return False
        
        logger.info(f"‚úÖ ACTUALIZACI√ìN COMPLETADA:")
        logger.info(f"   ‚Ä¢ Equipos actualizados: {result.get('equipos_actualizados', 0)}")
        logger.info(f"   ‚Ä¢ Jugadores actualizados: {result.get('jugadores_actualizados', 0)}")
        logger.info(f"   ‚Ä¢ Noticias actualizadas: {result.get('noticias_actualizadas', 0)}")
        logger.info(f"   ‚Ä¢ Fuentes exitosas: {len(result.get('fuentes_exitosas', []))}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå FALLO EN ACTUALIZACI√ìN AUTOM√ÅTICA: {str(e)}")
        return False

def main():
    """Funci√≥n principal del actualizador autom√°tico"""
    logger.info("ü§ñ Sistema de actualizaci√≥n autom√°tica Liga MX 2025 iniciado")
    logger.info("üìÖ Programado para ejecutarse cada 30 minutos")
    
    # Programar actualizaci√≥n cada 30 minutos
    schedule.every(30).minutes.do(update_liga_mx_data)
    
    # Ejecutar una actualizaci√≥n inicial
    logger.info("‚ö° Ejecutando actualizaci√≥n inicial...")
    update_liga_mx_data()
    
    # Mantener el programa corriendo
    logger.info("‚è∞ Sistema en espera... Pr√≥xima actualizaci√≥n en 30 minutos")
    
    while True:
        try:
            schedule.run_pending()
            time.sleep(60)  # Revisar cada minuto si hay tareas pendientes
            
        except KeyboardInterrupt:
            logger.info("‚èπÔ∏è Sistema de actualizaci√≥n autom√°tica detenido por el usuario")
            break
        except Exception as e:
            logger.error(f"‚ùå Error en el bucle principal: {str(e)}")
            time.sleep(300)  # Esperar 5 minutos antes de reintentar

if __name__ == "__main__":
    main()